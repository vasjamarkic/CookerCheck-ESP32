#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "CoockerCheck_BETA"
  https://create.arduino.cc/cloud/things/c8c59994-e601-4bef-ba84-d718d55ed4f4 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float cycle_dT;
  float T;
  float T_ref;
  bool alarm_hot;
  bool power_off;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
  https://lastminuteengineers.com/esp32-deep-sleep-wakeup-sources/
  https://microdigisoft.com/esp32-with-wifimanager-to-manage-ssid-and-password-no-hard-coding/
  !!!While uploading the code to ESP32, must press the BOOT button!!!
*/

#include "thingProperties.h"
#include <WiFi.h>
#include "DHT.h"                                                        /*install the DHT library of Adafruit! */
#define DHTPIN 18                                                       /* must not be pin 2 -->  Tx & Rx reserved! */
#define DHTTYPE DHT11
#define Threshold 30                                                    /* Greater the value, more the sensitivity for deep sleep wake up */
#define LED_ESP 2                                                       /* Signalisation of WiFi connected - board BLUE led */
const int RED = 13, GREEN = 12, BLUE = 14, BUZZ = 4, IR = 5;            /* RGB LEDs for status information */
bool stevec_start = 0;
//float T;
//float T_ref=1000.0;               /*t_REF --> REFERENCE temperature measured at start-up, t --> periodically taken temperature */
float dT = 1.0,T_old;              /*treshold dT for heating ON, T_old .... previus measure, cycle_dT ... temp gradient per cycle */
int fire_on_counter = 0, fire_off_counter = 0, heater_on = 0;                                     
int hot_min = 3;                                  /*DEFINE the time for periodical RED LED + Buzzer alarming */
int cold_min = 15;                                 /*DEFINE the time for (deep-sleep) turning off the device */

DHT dht(DHTPIN, DHTTYPE);
RTC_DATA_ATTR int bootCount = 0;
touch_pad_t touchPin;

const char* ssid = "Xiaomi 11 Lite 5G NE";
const char* password ="vavava11";

/*--------------------------*/
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
  {
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
  }
}
/*--------------------------*/
void print_wakeup_touchpad(){
  touchPin = esp_sleep_get_touchpad_wakeup_status();
  switch(touchPin)
  {
    case 0  : Serial.println("Touch detected on GPIO 4"); break;
    case 1  : Serial.println("Touch detected on GPIO 0"); break;
    case 2  : Serial.println("Touch detected on GPIO 2"); break;
    case 3  : Serial.println("Touch detected on GPIO 15"); break;
    case 4  : Serial.println("Touch detected on GPIO 13"); break;
    case 5  : Serial.println("Touch detected on GPIO 12"); break;
    case 6  : Serial.println("Touch detected on GPIO 14"); break;
    case 7  : Serial.println("Touch detected on GPIO 27"); break;
    case 8  : Serial.println("Touch detected on GPIO 33"); break;
    case 9  : Serial.println("Touch detected on GPIO 32"); break;
    default : Serial.println("Wakeup not by touchpad"); break;
  }
}
/*----------------------------------------------------------------------------*/
void callback(){
  //placeholder callback function
}
/*----------------------------------------------------------------------------*/
void toggleLED(int pin) {                  //funkcija za utripanje LED (toggle)
  digitalWrite(pin, !digitalRead(pin));
}
/*----------------------------------------------------------------------------*/
void setup() {

  Serial.begin(115200);
  // Defined in thingProperties.h
  initProperties(); 
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
    /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
    */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  power_off = LOW;
  dht.begin();
  
  pinMode (RED, OUTPUT);
  pinMode (GREEN, OUTPUT);
  pinMode (BLUE, OUTPUT);
  pinMode (BUZZ, OUTPUT);
  pinMode (IR, INPUT);
  pinMode(LED_ESP,OUTPUT);
    
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("\nConnecting");
  ++bootCount;                                          //Increment boot number and print it every reboot
  Serial.println("Boot number: " + String(bootCount));  //Print the wakeup reason for ESP32 and touchpad too
  print_wakeup_reason();
  print_wakeup_touchpad();
  touchAttachInterrupt(T3, callback, Threshold);        //Setup interrupt on Touch Pad 3 (GPIO15)
  esp_sleep_enable_touchpad_wakeup();                   //Configure Touchpad as wakeup source
  }

void loop() {
  ArduinoCloud.update();
  //Izvedba referenčne meritve - samo ob prvem fizičnem zagonu ali v primeru neuspelega 
  //zajema temperature (NaN) ali v primeru zbujenja ESP32 iz DeepSleep mode ob pritisku tipke EN
  if (stevec_start == 0 or T_ref == 1.0/0.0 or bootCount == 1) {
    toggleLED(BLUE);
    delay(3000);
    toggleLED(BLUE);
    T = dht.readTemperature();   
    T_ref = T;   //prenos ref. temp. v t_REF
    T_old = T;
    digitalWrite(GREEN, HIGH);
    for(int k=0;k<9;k++) {
    //izmenično utripanje  zelene led
      toggleLED(GREEN);
      delay(250);
      bootCount = 0;    //reset števca za ponovno možnost vstopa v to vejitev za zajem referenčne temperature
      }
    Serial.println("Measure of the reference start temperature.");
    stevec_start = 1;   //blokiranje IF zanke, ko opravi prvi zagon ob fizičnem vklopu naprave na napetost
    }
    
  float h = dht.readHumidity();    //branje senzorja DHT11:
  T = dht.readTemperature();
  cycle_dT = T - T_old;        // 10s_dT > 0: heating; 10s_dT < 0:  cooling
  if (isnan(h) || isnan(T)) {           // Check if any reads failed and exit early (to try again).
    Serial.println(F("Failed to read from DHT sensor!"));
    delay(200);
    return;
    }
  Serial.print(WiFi.localIP());
  Serial.print(String(" IP add.|"  ));
  Serial.print(String(" T_ref: ") + String(T_ref, 2) + String(" °C |"));
  Serial.print(String(" T_now: ") + String(T, 1) + String(" °C |"));
  Serial.print(String(" IR: ") + String(digitalRead(IR)));
  /*--------------signalization--board-LED--WIFI---Connected---------------------*/
  if (WiFi.status()==WL_CONNECTED) {
    digitalWrite(LED_ESP,HIGH);   //BLUE LED on ESP shows of status WiFi!
    }
  else{
    digitalWrite(LED_ESP,LOW);   //BLUE LED on ESP shows of status WiFi!
    }

  //ČE TEMP presega REF + dT 
  if (T >= T_ref + dT) {
    digitalWrite (BLUE, LOW);
    digitalWrite (RED, LOW);
    digitalWrite (GREEN, HIGH);
    delay(100);
    digitalWrite (GREEN, LOW);
    delay(100);
    digitalWrite (GREEN, HIGH);
    delay(100);
    digitalWrite (GREEN, LOW);
    delay(100);
    Serial.print("| GREEN |");
    fire_on_counter++;
    heater_on++;
    if (fire_on_counter > 6*hot_min) {     //določiti število ciklov, ko se sproži alarm! (1 cikel = 10 sekund)
      for (int j = 0; j <=4; j++) {         //ponovitev 3x alarm
        alarm_hot = HIGH;
        digitalWrite (GREEN, LOW);
        toggleLED(RED);                     //vklop/izklop rdeče LED
        delay(1000);
        ArduinoCloud.update();
        for (int i = 0; i <= 45; i++) {     //loopanje za 1 sek alarm
          if (digitalRead(IR)==LOW) {        //omogočanje piskanje alarma le, ko ni osebe
            digitalWrite(BUZZ, HIGH);
            delay(10);
            digitalWrite(BUZZ, LOW);
            }
          delay(10);
          }
        }
      alarm_hot = LOW;
      //izstop iz FOR zanke za alarmiranje.
      fire_on_counter = 0;
    }
  }
  //temp ne presega REF + dT ali gradient temperature je negativen
  else if (T < T_ref + dT or cycle_dT <= 0){ 
    fire_on_counter = 0;  //resetiranje števca zaradi ugasnjenega grelca 
    digitalWrite (BLUE, HIGH);
    delay(400);
    digitalWrite(BLUE,LOW);
    digitalWrite (GREEN, LOW);
    Serial.print("|  BLUE |");
    fire_off_counter++;
    if (fire_off_counter > 6*cold_min) {   //določiti število ciklov, ko je štedilnik hladen, preden se izklopi Cooker-check.
      //izklop naprave (deep sleep)
      digitalWrite (BLUE, HIGH);
      power_off = HIGH;   //send to IoT Cloud
      delay(1500);
      digitalWrite (RED, HIGH);
      ArduinoCloud.update();
      delay(1500);
      Serial.println(" Turning into DEEP SLEEP. ");
      esp_deep_sleep_start();               //power off the device
      delay(10000);
      }
    } 
    // turn on the LED
  delay(9600); //orig. naj bo 9600 - med meritvami vsaj 10 s razlike! 
  if(fire_on_counter > 0 and cycle_dT > 0.0) {    //if the fire is on and the gradient dT > 0, then the T_ref must be rised to some max.
    T_ref=T_ref+(1.0/(1.7*heater_on));         //dinamicaly rises the T_ref while the room is warming 
    }
    Serial.print(String(" Fire_on_count.: ") + String(fire_on_counter)+ String(" | Heater_on_count.: ") + String(heater_on));
    Serial.println(String(" | Cycle dT: ") + String(cycle_dT, 1));  //display the cycle trend of T between cycles (10 s)
    T_old = T;  
}